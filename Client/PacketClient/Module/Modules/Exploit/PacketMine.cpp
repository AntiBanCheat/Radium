#include "PacketMine.h"
#include "../pch.h"
using namespace std;
PacketMine::PacketMine() : IModule(0, Category::PLAYER, "Hive doesn't work anticheat") {
	registerEnumSetting("Mode", &mode, 0);
	mode.addEntry("Hive", 0);
	mode.addEntry("Nukkit", 1);
}

void PacketMine::onEnable() {
	hasClicked = false;
}

const char* PacketMine::getModuleName() {
	return "PacketMine";
}







void getPickaxePM() {
	auto supplies = g_Data.getLocalPlayer()->getSupplies();
	auto inv = supplies->inventory;  // g_Data.getLocalPlayer()->getSupplies()->inventory->getItemStack(g_Data.getLocalPlayer()->getSupplies())->getItem()->itemID
	for (int n = 0; n < 9; n++) {
		C_ItemStack* stack = inv->getItemStack(n);
		if (stack->item != nullptr) {
			if (stack->getItem()->itemId == 318 || stack->getItem()->itemId == 606) {  // select pick
				supplies->selectedHotbarSlot = n;
				return;
			}
		}
	}
}
	bool doIHaveAPick() {
		auto supplies = g_Data.getLocalPlayer()->getSupplies();
		auto inv = supplies->inventory;  // g_Data.getLocalPlayer()->getSupplies()->inventory->getItemStack(g_Data.getLocalPlayer()->getSupplies())->getItem()->itemID

		for (int n = 0; n < 9; n++) {
			C_ItemStack* stack = inv->getItemStack(n);
			if (stack->item != nullptr) {
				if (stack->getItem()->itemId == 318) {  // there's a diamond pick
					return true;
				}
				else if (stack->getItem()->itemId == 606) {  // there's a netherite pick
					return true;
				}
			}
		}

		return false;
	}


	int PacketMine::ticksToMine(vec3_ti toMine) {

		float speedMultiplier;
		int pickSlot;
		auto supplies = g_Data.getLocalPlayer()->getSupplies();
		auto inv = supplies->inventory;  // g_Data.getLocalPlayer()->getSupplies()->inventory->getItemStack(g_Data.getLocalPlayer()->getSupplies())->getItem()->itemID


		for (int n = 0; n < 9; n++) {
			C_ItemStack* stack = inv->getItemStack(n);
			if (stack->item != nullptr) {
				if (stack->getItem()->isPickaxe()) {  // there's a diamond pick
					pickSlot = n;
					speedMultiplier = 8;
				}
			}
		}
	}

void PacketMine::onTick(C_GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	if (player == nullptr || gm->player->pointingStruct->block == vec3_t(0, 0, 0)) return;
	if (g_Data.canUseMoveKeys() && !moduleMgr->getModule<ClickGUIMod>()->isEnabled()) {
		C_PlayerInventoryProxy* supplies = g_Data.getLocalPlayer()->getSupplies();
		C_Inventory* inv = supplies->inventory;
		float damage = 0;
		float speed = 0;
		int slot = -1;
		bool idk = false;
		if (!GameData::isLeftClickDown())
			if (hasClicked) hasClicked = false;
		if (GameData::isLeftClickDown() && !hasClicked) {


			for (int n = 0; n < 9; n++) {
				C_ItemStack* stack = inv->getItemStack(n);
				if (stack->item != nullptr) {
					float currentDamage = stack->getItem()->getAttackDamage();
					bool IsUseful =
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 5 ||
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 4 ||
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 3 ||
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 2 ||
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 1 ||
						stack->getItem()->getDestroySpeed(*stack, *g_Data.getLocalPlayer()->region->getBlock(player->pointingStruct->block)) == 0;
					if (currentDamage > damage && IsUseful) {
						damage = currentDamage;
						idk = true;
						slot = supplies->selectedHotbarSlot;
						supplies->selectedHotbarSlot = n;
					}
				}

			}

			if (idk) {
				if (mode.getSelectedValue() == 0) {
					gm->startDestroyBlock(player->pointingStruct->block, player->pointingStruct->blockSide, idk);
					gm->stopDestroyBlock(player->pointingStruct->block);
				}
				gm->destroyBlock(&player->pointingStruct->block, player->pointingStruct->blockSide);
				supplies->selectedHotbarSlot = slot;
				idk = false;
			}
			hasClicked = true;
		}
	}
}
